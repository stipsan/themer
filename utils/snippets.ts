// Automatically generated by running `npm run build:snippets`

export function snippet(id: 'import-dynamic-js'): (first: string) => string
export function snippet(id: 'import-dynamic-ts'): (first: string) => string
export function snippet(id: 'import-static'): (first: string) => string
export function snippet(id: 'studio-config'): (first: string) => string
export function snippet(id: 'sanity.cli.ts'): () => string
export function snippet(id: 'sanity.cli.js'): () => string
export function snippet(
  id: 'studio-config-create-theme'
): (first: string) => string
export function snippet(
  id: 'import-create-theme-static'
): (first: string) => string
export function snippet(
  id: 'import-create-theme-dynamic'
): (first: string) => string
export function snippet(id: 'themer.d.ts'): (first: string) => string
export function snippet(id: 'tsconfig'): () => string
export function snippet(id) {
  switch (id) {
    case 'import-dynamic-js':
      return (first: string) => `const { theme } = await import(${first})`

    case 'import-dynamic-ts':
      return (first: string) => `const { theme } = (await import(
  // @ts-expect-error -- TODO setup themer.d.ts to get correct typings
  ${first}
)) as { theme: import('sanity').StudioTheme }`

    case 'import-static':
      return (first: string) => `// Add this URL ESM import
import { theme } from ${first}`

    case 'studio-config':
      return (first: string) => `// Add two lines of code to your workspace
import { createConfig } from 'sanity'
import { deskTool } from 'sanity/desk'

import { schemaTypes } from './schemas'

// 1. Add the import
${first}

export default createConfig({
  theme, // <-- 2. add the theme here

  name: 'default',
  title: 'My Sanity Project',
  projectId: 'b5vzhxkv',
  dataset: 'production',
  plugins: [deskTool()],
  schema: { types: schemaTypes }
})`

    case 'sanity.cli.ts':
      return () => `// Change target to allow top-level await in sanity.config.ts
import { createCliConfig } from 'sanity/cli'
import type { UserConfig } from 'vite'

export default createCliConfig({
  api: { projectId: 'b5vzhxkv', dataset: 'production' },
  vite: (config): UserConfig => ({
    ...config,
    build: { ...config.build, target: 'esnext' }
  })
})`

    case 'sanity.cli.js':
      return () => `// Change target to allow top-level await in sanity.config.js
import { createCliConfig } from 'sanity/cli'

export default createCliConfig({
  api: { projectId: 'b5vzhxkv', dataset: 'production' },
  vite: config => ({ ...config, build: { ...config.build, target: 'esnext' } })
})`

    case 'studio-config-create-theme':
      return (
        first: string
      ) => `// Import createTheme and hues to quickly modify your theme without changing the import URL
import { createConfig } from 'sanity'
import { deskTool } from 'sanity/desk'

import { schemaTypes } from './schemas'

${first}

export default createConfig({
  theme: createTheme({ ...hues, primary: { ...hues.primary, mid: '#22fca8' } }),

  name: 'default',
  title: 'My Sanity Project',
  projectId: 'b5vzhxkv',
  dataset: 'production',
  plugins: [deskTool()],
  schema: { types: schemaTypes }
})`

    case 'import-create-theme-static':
      return (first: string) => `import { createTheme, hues } from ${first}`

    case 'import-create-theme-dynamic':
      return (first: string) => `const { createTheme, hues } = await import(
  ${first}
)`

    case 'themer.d.ts':
      return (first: string) => `module ${first} {
  interface Hue
    extends Omit<import('@sanity/color').ColorHueConfig, 'title' | 'midPoint'> {
    midPoint: 50 | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | 950
  }
  interface Hues {
    default: Hue
    transparent: Hue
    primary: Hue
    positive: Hue
    caution: Hue
    critical: Hue
  }
  const hues: Hues
  type Theme = import('sanity').StudioTheme
  const createTheme = (hues: Hues): Theme => theme
  const theme: Theme

  export { hues, createTheme, theme }
}`

    case 'tsconfig':
      return () => `{
  "compilerOptions": {
    // target needs to be es2017 or newer to allow top-level await
    "target": "es2017",

    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}`

    default:
      throw new TypeError('Unknown snippet id: ' + id)
  }
}
